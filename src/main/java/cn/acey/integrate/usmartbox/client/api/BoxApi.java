/*
 * 电商对接API参考文档
 * 电商对接API参考文档
 *
 * OpenAPI spec version: 2.2.2
 * Contact: qyang@yicksolutions.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package cn.acey.integrate.usmartbox.client.api;

import cn.acey.integrate.usmartbox.client.ApiCallback;
import cn.acey.integrate.usmartbox.client.ApiClient;
import cn.acey.integrate.usmartbox.client.ApiException;
import cn.acey.integrate.usmartbox.client.ApiResponse;
import cn.acey.integrate.usmartbox.client.Configuration;
import cn.acey.integrate.usmartbox.client.Pair;
import cn.acey.integrate.usmartbox.client.ProgressRequestBody;
import cn.acey.integrate.usmartbox.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cn.acey.integrate.usmartbox.client.model.BoxSearchResponse;
import cn.acey.integrate.usmartbox.client.model.BranchBoxSearchResponse;
import cn.acey.integrate.usmartbox.client.model.RemotePutInHistoryResponse;
import cn.acey.integrate.usmartbox.client.model.RemotePutInResponse;
import cn.acey.integrate.usmartbox.client.model.RemoteTakeOutResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BoxApi {
    private ApiClient apiClient;

    public BoxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoxApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for remotePutInBox
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param boxno 柜子编号 (optional)
     * @param butype 业务类型 (optional)
     * @param func 格子功能 目前1常温2冷藏 (optional)
     * @param kphone 配送员手机号 (optional)
     * @param orderid 订单号 (optional)
     * @param phone 收货人手机号 (optional)
     * @param size 格子大小 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call remotePutInBoxCall(String apikey, String nonce, String sign, String boxno, String butype, String func, String kphone, String orderid, String phone, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ec/cun.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apikey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apikey", apikey));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (sign != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sign", sign));
        if (boxno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boxno", boxno));
        if (butype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("butype", butype));
        if (func != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("func", func));
        if (kphone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kphone", kphone));
        if (orderid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderid", orderid));
        if (phone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phone", phone));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "applicaiton/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call remotePutInBoxValidateBeforeCall(String apikey, String nonce, String sign, String boxno, String butype, String func, String kphone, String orderid, String phone, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling remotePutInBox(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling remotePutInBox(Async)");
        }
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling remotePutInBox(Async)");
        }
        
        com.squareup.okhttp.Call call = remotePutInBoxCall(apikey, nonce, sign, boxno, butype, func, kphone, orderid, phone, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 远程存
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param boxno 柜子编号 (optional)
     * @param butype 业务类型 (optional)
     * @param func 格子功能 目前1常温2冷藏 (optional)
     * @param kphone 配送员手机号 (optional)
     * @param orderid 订单号 (optional)
     * @param phone 收货人手机号 (optional)
     * @param size 格子大小 (optional)
     * @return RemotePutInResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemotePutInResponse remotePutInBox(String apikey, String nonce, String sign, String boxno, String butype, String func, String kphone, String orderid, String phone, String size) throws ApiException {
        ApiResponse<RemotePutInResponse> resp = remotePutInBoxWithHttpInfo(apikey, nonce, sign, boxno, butype, func, kphone, orderid, phone, size);
        return resp.getData();
    }

    /**
     * 远程存
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param boxno 柜子编号 (optional)
     * @param butype 业务类型 (optional)
     * @param func 格子功能 目前1常温2冷藏 (optional)
     * @param kphone 配送员手机号 (optional)
     * @param orderid 订单号 (optional)
     * @param phone 收货人手机号 (optional)
     * @param size 格子大小 (optional)
     * @return ApiResponse&lt;RemotePutInResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemotePutInResponse> remotePutInBoxWithHttpInfo(String apikey, String nonce, String sign, String boxno, String butype, String func, String kphone, String orderid, String phone, String size) throws ApiException {
        com.squareup.okhttp.Call call = remotePutInBoxValidateBeforeCall(apikey, nonce, sign, boxno, butype, func, kphone, orderid, phone, size, null, null);
        Type localVarReturnType = new TypeToken<RemotePutInResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 远程存 (asynchronously)
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param boxno 柜子编号 (optional)
     * @param butype 业务类型 (optional)
     * @param func 格子功能 目前1常温2冷藏 (optional)
     * @param kphone 配送员手机号 (optional)
     * @param orderid 订单号 (optional)
     * @param phone 收货人手机号 (optional)
     * @param size 格子大小 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call remotePutInBoxAsync(String apikey, String nonce, String sign, String boxno, String butype, String func, String kphone, String orderid, String phone, String size, final ApiCallback<RemotePutInResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = remotePutInBoxValidateBeforeCall(apikey, nonce, sign, boxno, butype, func, kphone, orderid, phone, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemotePutInResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for remotePutInBoxHistory
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param orderid 订单号 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call remotePutInBoxHistoryCall(String apikey, String nonce, String sign, String orderid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ec/cunr.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apikey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apikey", apikey));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (sign != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sign", sign));
        if (orderid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderid", orderid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "applicaiton/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call remotePutInBoxHistoryValidateBeforeCall(String apikey, String nonce, String sign, String orderid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling remotePutInBoxHistory(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling remotePutInBoxHistory(Async)");
        }
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling remotePutInBoxHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = remotePutInBoxHistoryCall(apikey, nonce, sign, orderid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 远程存
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param orderid 订单号 (optional)
     * @return RemotePutInHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemotePutInHistoryResponse remotePutInBoxHistory(String apikey, String nonce, String sign, String orderid) throws ApiException {
        ApiResponse<RemotePutInHistoryResponse> resp = remotePutInBoxHistoryWithHttpInfo(apikey, nonce, sign, orderid);
        return resp.getData();
    }

    /**
     * 远程存
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param orderid 订单号 (optional)
     * @return ApiResponse&lt;RemotePutInHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemotePutInHistoryResponse> remotePutInBoxHistoryWithHttpInfo(String apikey, String nonce, String sign, String orderid) throws ApiException {
        com.squareup.okhttp.Call call = remotePutInBoxHistoryValidateBeforeCall(apikey, nonce, sign, orderid, null, null);
        Type localVarReturnType = new TypeToken<RemotePutInHistoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 远程存 (asynchronously)
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param orderid 订单号 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call remotePutInBoxHistoryAsync(String apikey, String nonce, String sign, String orderid, final ApiCallback<RemotePutInHistoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = remotePutInBoxHistoryValidateBeforeCall(apikey, nonce, sign, orderid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemotePutInHistoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for remoteTakeOutBox
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param opencode 取货密码 (required)
     * @param seqid 流水号 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call remoteTakeOutBoxCall(String apikey, String nonce, String sign, String gridno, String opencode, String seqid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ec/qu.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apikey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apikey", apikey));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (sign != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sign", sign));
        if (gridno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gridno", gridno));
        if (opencode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("opencode", opencode));
        if (seqid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seqid", seqid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "applicaiton/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call remoteTakeOutBoxValidateBeforeCall(String apikey, String nonce, String sign, String gridno, String opencode, String seqid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling remoteTakeOutBox(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling remoteTakeOutBox(Async)");
        }
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling remoteTakeOutBox(Async)");
        }
        // verify the required parameter 'gridno' is set
        if (gridno == null) {
            throw new ApiException("Missing the required parameter 'gridno' when calling remoteTakeOutBox(Async)");
        }
        // verify the required parameter 'opencode' is set
        if (opencode == null) {
            throw new ApiException("Missing the required parameter 'opencode' when calling remoteTakeOutBox(Async)");
        }
        // verify the required parameter 'seqid' is set
        if (seqid == null) {
            throw new ApiException("Missing the required parameter 'seqid' when calling remoteTakeOutBox(Async)");
        }
        
        com.squareup.okhttp.Call call = remoteTakeOutBoxCall(apikey, nonce, sign, gridno, opencode, seqid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 远程取
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param opencode 取货密码 (required)
     * @param seqid 流水号 (required)
     * @return RemoteTakeOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemoteTakeOutResponse remoteTakeOutBox(String apikey, String nonce, String sign, String gridno, String opencode, String seqid) throws ApiException {
        ApiResponse<RemoteTakeOutResponse> resp = remoteTakeOutBoxWithHttpInfo(apikey, nonce, sign, gridno, opencode, seqid);
        return resp.getData();
    }

    /**
     * 远程取
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param opencode 取货密码 (required)
     * @param seqid 流水号 (required)
     * @return ApiResponse&lt;RemoteTakeOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemoteTakeOutResponse> remoteTakeOutBoxWithHttpInfo(String apikey, String nonce, String sign, String gridno, String opencode, String seqid) throws ApiException {
        com.squareup.okhttp.Call call = remoteTakeOutBoxValidateBeforeCall(apikey, nonce, sign, gridno, opencode, seqid, null, null);
        Type localVarReturnType = new TypeToken<RemoteTakeOutResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 远程取 (asynchronously)
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param opencode 取货密码 (required)
     * @param seqid 流水号 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call remoteTakeOutBoxAsync(String apikey, String nonce, String sign, String gridno, String opencode, String seqid, final ApiCallback<RemoteTakeOutResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = remoteTakeOutBoxValidateBeforeCall(apikey, nonce, sign, gridno, opencode, seqid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemoteTakeOutResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for remoteTakeOutHistory
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param seqid 流水号 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call remoteTakeOutHistoryCall(String apikey, String nonce, String sign, String gridno, String seqid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ec/qur.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apikey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apikey", apikey));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (sign != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sign", sign));
        if (gridno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gridno", gridno));
        if (seqid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seqid", seqid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "applicaiton/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call remoteTakeOutHistoryValidateBeforeCall(String apikey, String nonce, String sign, String gridno, String seqid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling remoteTakeOutHistory(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling remoteTakeOutHistory(Async)");
        }
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling remoteTakeOutHistory(Async)");
        }
        // verify the required parameter 'gridno' is set
        if (gridno == null) {
            throw new ApiException("Missing the required parameter 'gridno' when calling remoteTakeOutHistory(Async)");
        }
        // verify the required parameter 'seqid' is set
        if (seqid == null) {
            throw new ApiException("Missing the required parameter 'seqid' when calling remoteTakeOutHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = remoteTakeOutHistoryCall(apikey, nonce, sign, gridno, seqid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询取件状态
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param seqid 流水号 (required)
     * @return RemoteTakeOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemoteTakeOutResponse remoteTakeOutHistory(String apikey, String nonce, String sign, String gridno, String seqid) throws ApiException {
        ApiResponse<RemoteTakeOutResponse> resp = remoteTakeOutHistoryWithHttpInfo(apikey, nonce, sign, gridno, seqid);
        return resp.getData();
    }

    /**
     * 查询取件状态
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param seqid 流水号 (required)
     * @return ApiResponse&lt;RemoteTakeOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemoteTakeOutResponse> remoteTakeOutHistoryWithHttpInfo(String apikey, String nonce, String sign, String gridno, String seqid) throws ApiException {
        com.squareup.okhttp.Call call = remoteTakeOutHistoryValidateBeforeCall(apikey, nonce, sign, gridno, seqid, null, null);
        Type localVarReturnType = new TypeToken<RemoteTakeOutResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询取件状态 (asynchronously)
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param gridno 完整格号 (required)
     * @param seqid 流水号 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call remoteTakeOutHistoryAsync(String apikey, String nonce, String sign, String gridno, String seqid, final ApiCallback<RemoteTakeOutResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = remoteTakeOutHistoryValidateBeforeCall(apikey, nonce, sign, gridno, seqid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemoteTakeOutResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchBox
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @param branchno 网点编号 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchBoxCall(String apikey, String nonce, String sign, String city, String district, String branchno, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ec/box.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apikey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apikey", apikey));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (sign != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sign", sign));
        if (city != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("city", city));
        if (district != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("district", district));
        if (branchno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branchno", branchno));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "applicaiton/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchBoxValidateBeforeCall(String apikey, String nonce, String sign, String city, String district, String branchno, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling searchBox(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling searchBox(Async)");
        }
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling searchBox(Async)");
        }
        
        com.squareup.okhttp.Call call = searchBoxCall(apikey, nonce, sign, city, district, branchno, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 根据城市及区号及网点编号查询下属柜子
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @param branchno 网点编号 (optional)
     * @return BoxSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BoxSearchResponse searchBox(String apikey, String nonce, String sign, String city, String district, String branchno) throws ApiException {
        ApiResponse<BoxSearchResponse> resp = searchBoxWithHttpInfo(apikey, nonce, sign, city, district, branchno);
        return resp.getData();
    }

    /**
     * 根据城市及区号及网点编号查询下属柜子
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @param branchno 网点编号 (optional)
     * @return ApiResponse&lt;BoxSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BoxSearchResponse> searchBoxWithHttpInfo(String apikey, String nonce, String sign, String city, String district, String branchno) throws ApiException {
        com.squareup.okhttp.Call call = searchBoxValidateBeforeCall(apikey, nonce, sign, city, district, branchno, null, null);
        Type localVarReturnType = new TypeToken<BoxSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 根据城市及区号及网点编号查询下属柜子 (asynchronously)
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @param branchno 网点编号 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchBoxAsync(String apikey, String nonce, String sign, String city, String district, String branchno, final ApiCallback<BoxSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchBoxValidateBeforeCall(apikey, nonce, sign, city, district, branchno, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoxSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchBranchBox
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchBranchBoxCall(String apikey, String nonce, String sign, String city, String district, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ec/branchbox.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apikey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apikey", apikey));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (sign != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sign", sign));
        if (city != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("city", city));
        if (district != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("district", district));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "applicaiton/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchBranchBoxValidateBeforeCall(String apikey, String nonce, String sign, String city, String district, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling searchBranchBox(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling searchBranchBox(Async)");
        }
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling searchBranchBox(Async)");
        }
        
        com.squareup.okhttp.Call call = searchBranchBoxCall(apikey, nonce, sign, city, district, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 根据城市及区号查询下属网点及柜子
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @return BranchBoxSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BranchBoxSearchResponse searchBranchBox(String apikey, String nonce, String sign, String city, String district) throws ApiException {
        ApiResponse<BranchBoxSearchResponse> resp = searchBranchBoxWithHttpInfo(apikey, nonce, sign, city, district);
        return resp.getData();
    }

    /**
     * 根据城市及区号查询下属网点及柜子
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @return ApiResponse&lt;BranchBoxSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BranchBoxSearchResponse> searchBranchBoxWithHttpInfo(String apikey, String nonce, String sign, String city, String district) throws ApiException {
        com.squareup.okhttp.Call call = searchBranchBoxValidateBeforeCall(apikey, nonce, sign, city, district, null, null);
        Type localVarReturnType = new TypeToken<BranchBoxSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 根据城市及区号查询下属网点及柜子 (asynchronously)
     * 
     * @param apikey key (required)
     * @param nonce 32位随机数 (required)
     * @param sign 用于校验 (required)
     * @param city 城市编号 (optional)
     * @param district 区号编号 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchBranchBoxAsync(String apikey, String nonce, String sign, String city, String district, final ApiCallback<BranchBoxSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchBranchBoxValidateBeforeCall(apikey, nonce, sign, city, district, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BranchBoxSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
